@model KlipboardAssessment.Models.TransactionBatchViewModel
@{
    ViewData["Title"] = "Add Transactions";
}

<h4>Add Transaction(s)</h4>
<hr />

<form asp-action="AddTransaction" method="post">
    @Html.AntiForgeryToken()

    <div id="transaction-forms">
        @for (int i = 0; i < Model.Transactions.Count; i++)
        {
            <div class="transaction-form border rounded p-3 mb-3">
                <div class="d-flex justify-content-between align-items-center mb-2">
                    <h5 class="m-0">Transaction @(i + 1)</h5>
                    <button type="button" class="btn btn-sm btn-outline-danger remove-row">Remove</button>
                </div>

                <div class="row g-2">
                    <div class="col-12 mb-2">
                        <label asp-for="Transactions[@i].AccountNumber" class="form-label"></label>
                        <select asp-for="Transactions[@i].AccountNumber"
                                asp-items="ViewBag.AccountNumbers"
                                class="form-control">
                            <option value="">-- select account --</option>
                        </select>
                        <span asp-validation-for="Transactions[@i].AccountNumber" class="text-danger"></span>
                    </div>

                    <div class="col-md-6 mb-2">
                        <label asp-for="Transactions[@i].Date" class="form-label"></label>
                        <input asp-for="Transactions[@i].Date" type="date" class="form-control" value="@(Model.Transactions[i].Date == default ? DateTime.Today.ToString("yyyy-MM-dd") : Model.Transactions[i].Date.ToString("yyyy-MM-dd"))" />
                        <span asp-validation-for="Transactions[@i].Date" class="text-danger"></span>
                    </div>

                    <div class="col-md-6 mb-2">
                        <label asp-for="Transactions[@i].Type" class="form-label"></label>
                        <select asp-for="Transactions[@i].Type"
                                asp-items="ViewBag.TransactionTypes"
                                class="form-control">
                        </select>
                        <span asp-validation-for="Transactions[@i].Type" class="text-danger"></span>
                    </div>


                    <div class="col-md-6 mb-2">
                        <label asp-for="Transactions[@i].Amount" class="form-label"></label>
                        <input asp-for="Transactions[@i].Amount" type="number" step="0.01" class="form-control" />
                        <span asp-validation-for="Transactions[@i].Amount" class="text-danger"></span>
                    </div>

                    <div class="col-md-6 mb-2">
                        <label asp-for="Transactions[@i].Reference" class="form-label"></label>
                        <input asp-for="Transactions[@i].Reference" class="form-control" />
                        <span asp-validation-for="Transactions[@i].Reference" class="text-danger"></span>
                    </div>

                </div>
            </div>
        }
    </div>

    <div class="mb-3">
        <button type="button" id="add-transaction" class="btn btn-secondary">+ New Transaction</button>
        <input type="submit" id="saveAll" value="Save All" class="btn btn-primary" />
        <a class="btn btn-danger" asp-action="Index">Cancel</a>
    </div>
</form>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}

    <script>
        (function () {
            // Start index at current number of rows (server rendered)
            let index = @Model.Transactions.Count;

            const container = document.getElementById("transaction-forms");

            // Attach remove listeners for server-rendered rows
            container.querySelectorAll(".remove-row").forEach(btn => {
                btn.addEventListener("click", function () {
                    const el = this.closest(".transaction-form");
                    if (!confirm("Remove this transaction row?")) return;
                    el.remove();
                    // NOTE: We don't reindex names/ids after remove - ASP.NET will still bind arrays
                    // if indexes are continuous. If you remove middle rows, indexes will be non-contiguous.
                    // A more complex reindexing can be added if necessary.
                });
            });

            document.getElementById("add-transaction").addEventListener("click", function () {
                // Clone the first transaction-form as template (it uses index 0 names)
                const first = container.querySelector(".transaction-form");
                if (!first) return;

                let clone = first.cloneNode(true);

                // Fix labels/inputs/selects names & ids
                clone.querySelectorAll("[name]").forEach(el => {
                    // replace [0] with [index]
                    el.name = el.name.replace(/\[\d+\]/, "[" + index + "]");
                    // ids are like Transactions_0__AccountNumber -> replace _0__ with _index__
                    if (el.id) el.id = el.id.replace(/_\d+__/ , "_" + index + "__");
                    // clear values
                    if (el.tagName.toLowerCase() === "select") {
                        el.selectedIndex = 0;
                    } else if (el.type === "date") {
                        el.value = new Date().toISOString().slice(0, 10);
                    } else {
                        el.value = "";
                    }
                });

                // Fix validation spans 'data-valmsg-for' attributes
                clone.querySelectorAll("[data-valmsg-for]").forEach(sp => {
                    sp.setAttribute("data-valmsg-for", sp.getAttribute("data-valmsg-for").replace(/\[\d+\]/, "[" + index + "]"));
                });

                // Add event listener to the cloned remove button
                const removeBtn = clone.querySelector(".remove-row");
                if (removeBtn) {
                    removeBtn.addEventListener("click", function () {
                        if (!confirm("Remove this transaction row?")) return;
                        clone.remove();
                    });
                }

                container.appendChild(clone);
                index++;
            });

            // If you want to confirm submission for safety:
            const saveBtn = document.getElementById("saveAll");
            saveBtn.addEventListener("click", function (e) {
                if (!confirm("Are you sure you want to save the entered transaction(s)?")) {
                    e.preventDefault();
                }
            });
        })();
    </script>
}
